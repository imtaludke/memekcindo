---
// src/pages/category/[slug]/[page].astro
import Layout from '../../../layouts/BaseLayout.astro';
import VideoCard from '../../../components/VideoCard.astro';
import { slugify } from '../../../utils/slugify';
import { nama, url } from '../../../utils/site.ts';
import type { VideoData } from '../../../utils/data.ts';

export const prerender = true;

// !!! PERUBAHAN PENTING DI SINI !!!
// Menggunakan fetch untuk membaca data JSON dari folder public
const response = await fetch(`${url}/processedVideos.json`);
const allVideos: VideoData[] = await response.json();
// !!! AKHIR PERUBAHAN PENTING !!!

const videosPerPage = 40;

// Get static paths for all categories and pages
export async function getStaticPaths() {
  const categoryData: { [key: string]: number } = {};
  allVideos.forEach(video => {
    if (!categoryData[video.category]) {
      categoryData[video.category] = 0;
    }
    categoryData[video.category]++;
  });

  const paths = Object.keys(categoryData).flatMap(categoryName => {
    const totalVideosInCategory = categoryData[categoryName];
    const totalPagesInCategory = Math.ceil(totalVideosInCategory / videosPerPage);
    const categorySlug = slugify(categoryName);

    return Array.from({ length: totalPagesInCategory }, (_, i) => ({
      params: { slug: categorySlug, page: (i + 1).toString() },
      props: { categoryName: categoryName } // Pass category name as prop
    }));
  });

  return paths;
}

const { slug, page } = Astro.params;
const currentPage = parseInt(page as string);
const { categoryName } = Astro.props; // Retrieve category name from props

// Filter videos by category
const categoryVideos = allVideos.filter(video => slugify(video.category) === slug);

// Sort videos (e.g., by title, or most recent, etc.)
const sortedCategoryVideos = [...categoryVideos].sort((a, b) => a.title.localeCompare(b.title));

// Paginate videos
const startIndex = (currentPage - 1) * videosPerPage;
const endIndex = startIndex + videosPerPage;
const paginatedVideos = sortedCategoryVideos.slice(startIndex, endIndex);

const totalVideosInCategory = sortedCategoryVideos.length;
const totalPagesInCategory = Math.ceil(totalVideosInCategory / videosPerPage);

// Preconnect domains for external embeds
const preconnectDomains = new Set<string>();
paginatedVideos.forEach(video => {
  try {
    if (video.embedUrl) {
      preconnectDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`Invalid URL for video ID "${video.id}" (category page):`, e);
  }
});

const pageCanonicalUrl = new URL(Astro.url.pathname, url).href; // Construct canonical URL

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: 'Category', url: `${url}/category/` },
  { name: categoryName, url: `${url}/category/${slug}/` },
  { name: `Page ${currentPage}`, url: `${url}/category/${slug}/${currentPage}/` },
];
---

<Layout
  title={`${categoryName} Videos (Page ${currentPage}) | ${nama}`}
  description={`Halaman ${currentPage} dari video kategori ${categoryName} di ${nama}.`}
  preconnectDomains={Array.from(preconnectDomains)}
  canonicalUrl={pageCanonicalUrl}
>
  <main class="category-page" itemscope itemtype="http://schema.org/CollectionPage">
    <nav class="breadcrumb" aria-label="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
      <ol>
        {breadcrumbs.map((item, index) => (
          <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            {index > 0 && <span class="separator">/</span>}
            {item.url ? (
              <a itemprop="item" href={item.url}>
                <span itemprop="name">{item.name}</span>
              </a>
            ) : (
              <span itemprop="name">{item.name}</span>
            )}
            <meta itemprop="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    <h1 class="page-title" itemprop="headline">Video Kategori: {categoryName} (Halaman {currentPage})</h1>
    <p class="page-description">Menampilkan {paginatedVideos.length} dari {totalVideosInCategory} video.</p>

    {paginatedVideos.length === 0 ? (
      <p class="no-videos">Tidak ada video di kategori ini untuk halaman ini.</p>
    ) : (
      <div class="video-grid">
        {paginatedVideos.map((video) => (
          <VideoCard video={video} videoDetailPath={`/${slugify(video.title)}-${video.id}`} />
        ))}
      </div>
    )}

    {totalPagesInCategory > 1 && (
      <nav class="pagination" aria-label={`Navigasi Kategori ${categoryName}`}>
        {currentPage > 1 && (
          <a
            href={`${url}/category/${slug}/${currentPage - 1}`}
            class="pagination-link pagination-prev"
            rel="prev"
          >
            &laquo; Sebelumnya
          </a>
        )}
        {Array.from({ length: totalPagesInCategory }, (_, i) => (
          <a
            key={i + 1}
            href={`${url}/category/${slug}/${i + 1}`}
            class={`pagination-link ${currentPage === i + 1 ? 'active' : ''}`}
            aria-current={currentPage === i + 1 ? 'page' : undefined}
          >
            {i + 1}
          </a>
        ))}
        {currentPage < totalPagesInCategory && (
          <a
            href={`${url}/category/${slug}/${currentPage + 1}`}
            class="pagination-link pagination-next"
            rel="next"
          >
            Berikutnya &raquo;
          </a>
        )}
      </nav>
    )}
  </main>
</Layout>