---
// src/pages/category/[slug]/[page].astro
import Layout from '../../../layouts/BaseLayout.astro';
import VideoCard from '../../components/VideoCard.astro';
import Pagination from '../../components/Pagination.astro';
import { slugify } from '../../utils/slugify';
import { nama, url, desk } from '../../utils/site.ts';
import type { VideoData } from '../../utils/data'; // Pastikan tipe ini masih diimpor

export const prerender = true; // Penting untuk prerender halaman kategori

// Ambil data video yang sudah diproses
// PENTING: Import this inside getStaticPaths for reliable access during build
// import processedVideosJson from '../../public/processedVideos.json';

// Definisikan jumlah video per halaman
const VIDEOS_PER_PAGE = 24;

export async function getStaticPaths() {
  // !!! PERUBAHAN PENTING DI SINI !!!
  // Import processedVideosJson di dalam getStaticPaths
  const allVideos: VideoData[] = (await import('../../public/processedVideos.json')).default as VideoData[];
  // !!! AKHIR PERUBAHAN PENTING !!!

  const categories = [...new Set(allVideos.map(video => video.category))];
  const paths = [];

  for (const category of categories) {
    const categorySlug = slugify(category);
    const filteredVideos = allVideos.filter(video => video.category === category);
    const totalPages = Math.ceil(filteredVideos.length / VIDEOS_PER_PAGE);

    for (let page = 1; page <= totalPages; page++) {
      paths.push({
        params: { slug: categorySlug, page: page.toString() },
        props: {
          categoryName: category,
          currentPage: page,
          totalPages: totalPages,
          filteredVideos: filteredVideos.slice((page - 1) * VIDEOS_PER_PAGE, page * VIDEOS_PER_PAGE),
          totalVideosInCategory: filteredVideos.length
        },
      });
    }
  }

  return paths;
}

const { categoryName, currentPage, totalPages, filteredVideos, totalVideosInCategory } = Astro.props;

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: 'Kategori', url: `${url}/category` }, // Link ke halaman kategori utama jika ada
  { name: categoryName, url: null }, // Kategori saat ini
];

const allDomains = new Set<string>();
filteredVideos.forEach(video => {
  try {
    if (video.embedUrl) {
      allDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`[ERROR] URL embed video tidak valid untuk video ID ${video.id} (Category Page):`, e);
  }
});
const preconnectDomains = Array.from(allDomains);
---

<Layout
  title={`Video ${categoryName} - Halaman ${currentPage} | ${nama}`}
  description={`Tonton koleksi video ${categoryName} terbaru. Halaman ${currentPage} dari ${totalPages}.`}
  preconnectDomains={preconnectDomains}
  siteName={nama}
  siteUrl={url}
>
  <main class="category-page">
    <nav class="breadcrumb" aria-label="breadcrumb">
      <ol>
        {breadcrumbs.map((item, index) => (
          <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            {index > 0 && <span class="separator">/</span>}
            {item.url ? (
              <a itemprop="item" href={item.url}>
                <span itemprop="name">{item.name}</span>
              </a>
            ) : (
              <span itemprop="name">{item.name}</span>
            )}
            <meta itemprop="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    <h1 class="page-title">Kategori: {categoryName} ({totalVideosInCategory} video)</h1>

    <div class="video-grid">
      {filteredVideos.map((video) => (
        <VideoCard video={video} videoDetailPath={`${url}/${slugify(video.title)}-${video.id}/`} />
      ))}
    </div>

    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseURL={`${url}/category/${slugify(categoryName)}`}
    />
  </main>
</Layout>

<style>
  .category-page {
    padding: var(--spacing-unit);
    max-width: var(--content-max-width);
    margin: 0 auto;
  }

  .page-title {
    text-align: center;
    margin-bottom: calc(var(--spacing-unit) * 2);
    color: var(--heading-color);
  }
</style>
