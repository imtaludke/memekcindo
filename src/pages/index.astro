---
// src/pages/index.astro
import Layout from '../layouts/BaseLayout.astro';
import VideoCard from '../components/VideoCard.astro';
import { slugify } from '../utils/slugify';
import { getAllVideos, type VideoData } from '../utils/data';
import { nama, desk, url, terbit } from '../utils/site.ts';

export const prerender = true;

const allVideos: VideoData[] = await getAllVideos();

const videosByCategory: { [key: string]: VideoData[] } = {};
const numberOfVideosPerCategory = 16; // Jumlah video acak yang ingin ditampilkan per kategori

// Set untuk melacak judul video yang sudah digunakan agar tidak ada duplikasi
// Ini akan melacak video yang digunakan di kategori.
const usedTitlesForCategories = new Set<string>();

allVideos.forEach(video => {
  if (!videosByCategory[video.category]) {
    videosByCategory[video.category] = [];
  }
  videosByCategory[video.category].push(video);
});

const finalVideosByCategory: { [key: string]: VideoData[] } = {};
const allCategoryNames = Object.keys(videosByCategory);

allCategoryNames.forEach(categoryName => {
  const videosInThisCategory = videosByCategory[categoryName];

  // Acak video di dalam kategori ini
  const shuffledVideosInThisCategory = videosInThisCategory
    .sort(() => 0.5 - Math.random());

  const selectedVideosForCategory: VideoData[] = [];

  // Iterasi melalui video yang diacak dan tambahkan hanya yang judulnya unik
  for (const video of shuffledVideosInThisCategory) {
    const normalizedTitle = video.title.toLowerCase().trim();
    if (!usedTitlesForCategories.has(normalizedTitle)) {
      selectedVideosForCategory.push(video);
      usedTitlesForCategories.add(normalizedTitle); // Tambahkan judul ke set yang sudah digunakan untuk kategori
    }
    if (selectedVideosForCategory.length >= numberOfVideosPerCategory) {
      break;
    }
  }
  finalVideosByCategory[categoryName] = selectedVideosForCategory;
});

const sortedCategories = Object.keys(finalVideosByCategory).sort();

// --- Logika Paginasi untuk Bagian "Video Pilihan" (Random Videos) ---
const videosPerPageRandom = 16; // Jumlah video per halaman untuk bagian "Video Pilihan"

const videosForRandomSelection = allVideos.filter(video => {
  const normalizedTitle = video.title.toLowerCase().trim();
  // Filter video yang judulnya BELUM terpakai di bagian kategori
  return !usedTitlesForCategories.has(normalizedTitle);
});

// Acak video untuk bagian "Video Pilihan"
const shuffledRandomVideos = videosForRandomSelection
  .sort(() => 0.5 - Math.random());

const currentPageRandom = 1; // Untuk index.astro, ini selalu halaman pertama dari video random

const totalPagesRandom = Math.ceil(shuffledRandomVideos.length / videosPerPageRandom);

const startIndexRandom = (currentPageRandom - 1) * videosPerPageRandom;
const endIndexRandom = startIndexRandom + videosPerPageRandom;
const paginatedRandomVideos = shuffledRandomVideos.slice(startIndexRandom, endIndexRandom);

// Logika untuk membuat deretan tautan paginasi (sama seperti sebelumnya, disesuaikan untuk random)
const maxPageLinks = 5;
let startPage = Math.max(1, currentPageRandom - Math.floor(maxPageLinks / 2));
let endPage = Math.min(totalPagesRandom, currentPageRandom + Math.floor(maxPageLinks / 2));

if (endPage - startPage + 1 < maxPageLinks) {
  startPage = Math.max(1, endPage - maxPageLinks + 1);
}
if (startPage === 1) {
  endPage = Math.min(totalPagesRandom, maxPageLinks);
}

const pagesToShowRandom: (number | 'ellipsis')[] = [];
if (startPage > 1) {
  pagesToShowRandom.push(1);
  if (startPage > 2) {
    pagesToShowRandom.push('ellipsis');
  }
}

for (let i = startPage; i <= endPage; i++) {
  pagesToShowRandom.push(i);
}

if (endPage < totalPagesRandom) {
  if (endPage < totalPagesRandom - 1) {
    pagesToShowRandom.push('ellipsis');
  }
  pagesToShowRandom.push(totalPagesRandom);
}
// --- Akhir Logika Paginasi untuk "Video Pilihan" ---


const allDomains = new Set<string>();

// Iterasi melalui paginatedRandomVideos untuk preconnect
paginatedRandomVideos.forEach(video => {
  try {
    if (video.embedUrl) allDomains.add(new URL(video.embedUrl).origin);
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/embed tidak valid untuk video ID ${video.id} (paginatedRandomVideos):`, e);
  }
});

// Iterasi melalui finalVideosByCategory untuk preconnect
Object.values(finalVideosByCategory).flat().forEach(video => {
  try {
    if (video.embedUrl) allDomains.add(new URL(video.embedUrl).origin);
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/embed tidak valid untuk video ID ${video.id} (finalVideosByCategory):`, e);
  }
});

const preconnectDomains = Array.from(allDomains);

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
];

const currentUrl = url;
const siteName = nama;
const siteDescription = desk;

---

<Layout
  title={`${nama} - Video Bokep Indo Terbaru`}
  description={siteDescription}
  preconnectDomains={preconnectDomains}
  siteName={siteName}
  siteUrl={currentUrl}
>

  <main class="home-page" itemscope itemtype="http://schema.org/WebPage">
    <meta itemprop="url" content={currentUrl} />
    <meta itemprop="name" content={`${nama} - Video Bokep Indo Terbaru`} />
    <meta itemprop="description" content={desk} />
    <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content={siteName} />
      <div itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
        <meta itemprop="url" content={`${currentUrl}/logo.png`} />
      </div>
    </div>
    <meta itemprop="datePublished" content={terbit}/>
    <meta itemprop="dateModified" content={new Date().toISOString()} />

    <section class="hero-section">
      <h1 itemprop="headline">Selamat Datang di {nama}!</h1>
      <p itemprop="description">{desk} Tonton Sekarang Juga!</p>
    </section>

    {/* Bagian "Video Pilihan" dengan Paginasi */}
    <section class="random-videos-section">
      {paginatedRandomVideos.length > 0 ? (
        <>
          <h2 class="section-title">Video Pilihan (Halaman {currentPageRandom} dari {totalPagesRandom})</h2>
          <div class="video-grid">
            {paginatedRandomVideos.map((video) => (
              <VideoCard video={video} videoDetailPath={`/${slugify(video.title)}-${video.id}`} />
            ))}
          </div>

          {totalPagesRandom > 1 && (
            <nav class="pagination" aria-label="Navigasi Video Pilihan">
              {/* Previous button */}
              {currentPageRandom > 1 && (
                <a href={`${url}/random/${currentPageRandom - 1}`} class="pagination-link">&laquo; Sebelumnya</a>
              )}

              {/* Page numbers */}
              {pagesToShowRandom.map((page) => (
                page === 'ellipsis' ? (
                  <span class="pagination-link ellipsis">...</span>
                ) : (
                  <a
                    href={page === 1 ? `${url}` : `${url}/random/${page}`} // Halaman 1 kembali ke URL utama, lainnya ke /random/{page}
                    class={`pagination-link ${page === currentPageRandom ? 'active' : ''}`}
                    aria-current={page === currentPageRandom ? 'page' : undefined}
                  >
                    {page}
                  </a>
                )
              ))}

              {/* Next button */}
              {currentPageRandom < totalPagesRandom && (
                <a href={`${url}/random/${currentPageRandom + 1}`} class="pagination-link">Berikutnya &raquo;</a>
              )}
            </nav>
          )}
        </>
      ) : (
        <p class="no-videos">Tidak ada video pilihan yang ditemukan saat ini.</p>
      )}
    </section>


    {/* Bagian Kategori (tidak dipaginasi di sini) */}
    <section class="all-categories-section">
      {sortedCategories.length === 0 ? (
        <p class="no-videos-overall">Belum ada video yang tersedia di portal ini.</p>
      ) : (
        sortedCategories.map(categoryName => (
          <div class="category-group">
            <h2 class="category-title">
              {categoryName}
            </h2>
            <div class="video-grid">
              {finalVideosByCategory[categoryName].length === 0 ? (
                <p class="no-videos-in-category">Tidak ada video dalam kategori ini.</p>
              ) : (
                finalVideosByCategory[categoryName].map((video) => (
                  <VideoCard video={video} videoDetailPath={`/${slugify(video.title)}-${video.id}`} />
                ))
              )}
            </div>
            {videosByCategory[categoryName] && videosByCategory[categoryName].length > numberOfVideosPerCategory && (
              <div class="view-all-button-container">
                <a href={`${currentUrl}/category/${slugify(categoryName)}/1`} class="view-all-button">Lihat Semua di kategori {categoryName}</a>
              </div>
            )}
          </div>
        ))
      )}
    </section>

  </main>
</Layout>
